demo()
install.packages("devtools")
library(devtools)
install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
install_github("blogsvoices/iSAX")
install_github("blogsvoices/iSAX")
install_github("blogsvoices/iSAX")
library(rJava)
library(rJava)
remove.packages(rJava)
remove.packages('rJava')
library(rJava)
install.packages('rJava')
library(rJava)
library('rJava')
library('rJava')
remove.packages('rJava')
install.packages('rJava')
library('rJava')
library('rJava')
remove.packages('rJava')
install.packages('rJava')
library('rJava')
packages.import('rJava')
install.packages('rJava')
library('rJava')
library('rJava')
remove.packages('rJava')
library('rJava')
install.packages('rJava')
library('rJava')
q()
library(rStudio)
library(rJava)
library(rJava)
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
Sys.getenv("DYLD_LIBRARY_PATH")
dyn.load('/Library/Java/JavaVirtualMachines/jdk-11.0.6.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-11.0.6.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk-11.0.6.jdk/Contents/Home/lib/server/libjvm.dylib')
remove.packages('rJava')
install.packages('rJava')
library(rJava)
library(rJava)
library(iSAX)
install.packages("devtools")
library(devtools)
install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
install_github("blogsvoices/iSAX")
install.packages("devtools")
library(devtools)
install_github("blogsvoices/iSAX")
library(iSAX)
iSA(Strain, Stest, Dtrain, nboot = 1000, predict = FALSE,
ret.boot = FALSE, seqlen = 5, sparse = FALSE,
verbose = TRUE, tolerance=Inf)
iSA(stem_strings(c(
'the dirtier dog has eaten the pies',
'that shameful pooch is tricky and sneaky',
"He opened and then reopened the food bag",
)), stem_strings(c(
'There are skies of blue and red roses too!',
NA,
"The doggies, well they aren't joyfully running.",
"The daddies are coming over...",
"This is 34.546 above"
), stem_strings(c('positive', 'negative', 'neutral')), nboot = 1000, predict = FALSE, ret.boot = FALSE, seqlen = 5, sparse = FALSE, verbose = TRUE, tolerance=Inf)
)
library(textstem)
install.packages("textstem")
library(textstem)
iSA(stem_strings(c(
'the dirtier dog has eaten the pies',
'that shameful pooch is tricky and sneaky',
"He opened and then reopened the food bag",
)), stem_strings(c(
'There are skies of blue and red roses too!',
NA,
"The doggies, well they aren't joyfully running.",
"The daddies are coming over...",
"This is 34.546 above"
), stem_strings(c('positive', 'negative', 'neutral')), nboot = 1000, predict = FALSE, ret.boot = FALSE, seqlen = 5, sparse = FALSE, verbose = TRUE, tolerance=Inf)
)
iSA(stem_strings(c(
'the dirtier dog has eaten the pies',
'that shameful pooch is tricky and sneaky',
"He opened and then reopened the food bag"
)), stem_strings(c(
'There are skies of blue and red roses too!',
NA,
"The doggies, well they aren't joyfully running.",
"The daddies are coming over...",
"This is 34.546 above"
), stem_strings(c('positive', 'negative', 'neutral')), nboot = 1000, predict = FALSE, ret.boot = FALSE, seqlen = 5, sparse = FALSE, verbose = TRUE, tolerance=Inf))
iSA(c(
'the dirtier dog has eaten the pies',
'that shameful pooch is tricky and sneaky',
"He opened and then reopened the food bag"
), stem_strings(c(
'There are skies of blue and red roses too!',
NA,
"The doggies, well they aren't joyfully running.",
"The daddies are coming over...",
"This is 34.546 above"
), stem_strings(c('positive', 'negative', 'neutral')), nboot = 1000, predict = FALSE, ret.boot = FALSE, seqlen = 5, sparse = FALSE, verbose = TRUE, tolerance=Inf))
iSA(c(
'the dirtier dog has eaten the pies',
'that shameful pooch is tricky and sneaky',
"He opened and then reopened the food bag"
), c(
'There are skies of blue and red roses too!',
NA,
"The doggies, well they aren't joyfully running.",
"The daddies are coming over...",
"This is 34.546 above"
), c('positive', 'negative', 'neutral'), nboot = 1000, predict = FALSE, ret.boot = FALSE, seqlen = 5, sparse = FALSE, verbose = TRUE, tolerance=Inf))
iSA(c(
'the dirtier dog has eaten the pies',
'that shameful pooch is tricky and sneaky',
"He opened and then reopened the food bag"
), c('There are skies of blue and red roses too!', NA,
"The doggies, well they aren't joyfully running.",
"The daddies are coming over...",
"This is 34.546 above"), c('positive', 'negative', 'neutral'), nboot = 1000, predict = FALSE, ret.boot = FALSE, seqlen = 5, sparse = FALSE, verbose = TRUE, tolerance=Inf))
iSA(c('test'), c('train'), c('positive'))
iSA(c('test'), c('train', 'train 1'), c('positive'))
iSA(c('test'), c('train', 'train 1'), c('positive'), predict=True)
iSA(c('test'), c('train', 'train 1'), c('positive'), predict=true)
iSA(c('test'), c('train', 'train 1'), c('positive'), predict=TRUE)
iSA(c('test'), c('train', 'train 1', 'test'), c('positive'), predict=TRUE)
iSA(c('test', 'train'), c('train', 'train 1', 'test'), c('positive', 'negative'), predict=TRUE)
stem_words(c('the cat took the dog out for a nap', 'I ate the pie'))
c(stem_words(c('the cat took the dog out for a nap', 'I ate the pie')))
iSA(c('test', 'train'), c(stem_words(c('train', 'train 1', 'test'))), c('positive', 'negative'), predict=TRUE)
iSA(c('test', 'train'), c(stem_words(c('train', 'train 1', 'test', 'train test'))), c('positive', 'negative'), predict=TRUE)
iSA(c('test', 'train'), c(stem_words(c('train', 'train 1', 'test', 'train test'))), c('positive', 'negative'), predict=TRUE).pred
x = iSA(c('test', 'train'), c(stem_words(c('train', 'train 1', 'test', 'train test'))), c('positive', 'negative'), predict=TRUE)
x[6]
c(x[6])
x = iSA(c('test', 'train'), c(stem_words(c('train', 'train 1', 'test', 'train test'))), c('positive', 'negative'), predict=TRUE)
x = iSA(c('test', 'train'), c(stem_words(c('train', 'train 1', 'test', 'train test'))), c('positive', 'negative'), predict=TRUE)
clear
clear()
print(x[6])
install.packages("devtools")
print("hello")
install.packages("devtools")
x = iSA(c('test', 'train'), c(stem_words(c('train', 'train 1', 'test', 'train test'))), c('positive', 'negative'), predict=TRUE)
print(x[6])
print("hello")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'Home/thesis/data/newhampshire/ceron/bennet_training_data.csv', header=T)
test_data <- c(stem_words(y$Polarity))
train_data<-c(stem_strings(x$Word))
words
words
# install.packages("devtools")
# library(devtools)
# install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
# install_github("blogsvoices/iSAX")
# library(iSAX)
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = '../data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = '../data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
x = iSA(train_data, test_data, train_labels, predict=T)
print(x[6])
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = '../data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = '../data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
x = iSA(train_data, test_data, train_labels, predict=T)
print(x[6])
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = '../data/newhampshire/ceron/bennet_training_data.csv', header=T)
results <- iSA(train_data, test_data, train_labels, predict=T)
library(devtools)
# install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
# install_github("blogsvoices/iSAX")
library(iSAX)
library(textstem)
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = '../data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = '../data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
results <- iSA(train_data, test_data, train_labels, predict=T)
print(results[6])
getwd()
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'thesis/data/newhampshire/ceron/bennet_training_data.csv', header=T)
setwd("thesis")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = 'data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
results <- iSA(train_data, test_data, train_labels, predict=T)
print(results[6])
setwd("thesis")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = 'data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
num <- 0
denom <- 0
total <- 0
results <- iSA(train_data, test_data, train_labels, predict=T)
for (sentiment in results[6]) {
total <- total + 1
if (strcmp(sentiment, "weakneg")) {
denom <- denom + 1
} else if (strcmp(sentiment, "strongneg")) {
denom <- denom + 2
} else if (strcmp(sentiment, "weakpos")) {
num <- num + 1
} else if (strcmp(sentiment, "strongpos")) {
num <- num + 2
}
}
fileConn<-file("data/iowa/ceron/results/output.txt")
writeLines(c("biden sentiment: " + num/denom), fileConn)
close(fileConn)
setwd("thesis")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = 'data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
num <- 0
denom <- 0
total <- 0
results <- iSA(train_data, test_data, train_labels, predict=T)
for (sentiment in results[6]) {
total <- total + 1
if (strcmp(sentiment, "weakneg")) {
denom <- denom + 1
} else if (strcmp(sentiment, "strongneg")) {
denom <- denom + 2
} else if (strcmp(sentiment, "weakpos")) {
num <- num + 1
} else if (strcmp(sentiment, "strongpos")) {
num <- num + 2
}
}
fileConn<-file("data/iowa/ceron/results/output.txt")
writeLines(c(paste("biden sentiment: ", num/denom)), fileConn)
close(fileConn)
fileConn<-file("data/newhampshire/ceron/results.txt")
writeLines(c(paste("biden sentiment: ", num/denom)), fileConn)
close(fileConn)
setwd("thesis")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = 'data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
num <- 0
denom <- 0
total <- 0
results <- iSA(train_data, test_data, train_labels, predict=T)
for (sentiment in results[6]) {
total <- total + 1
if (strcmp(sentiment, "weakneg")) {
denom <- denom + 1
} else if (strcmp(sentiment, "strongneg")) {
denom <- denom + 2
} else if (strcmp(sentiment, "weakpos")) {
num <- num + 1
} else if (strcmp(sentiment, "strongpos")) {
num <- num + 2
}
}
print(num)
print(denom)
fileConn<-file("data/newhampshire/ceron/results.txt")
writeLines(c(paste("biden sentiment: ", num/denom)), fileConn)
close(fileConn)
# install.packages("devtools")
library(devtools)
# install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
# install_github("blogsvoices/iSAX")
library(iSAX)
library(textstem)
setwd("thesis")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = 'data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
num <- 0
denom <- 0
total <- 0
results <- iSA(train_data, test_data, train_labels, predict=T)
for (sentiment in results[6]) {
total <- total + 1
print(strcmp(sentiment, "weakneg"))
if (strcmp(sentiment, "weakneg")) {
denom <- denom + 1
} else if (strcmp(sentiment, "strongneg")) {
denom <- denom + 2
} else if (strcmp(sentiment, "weakpos")) {
num <- num + 1
} else if (strcmp(sentiment, "strongpos")) {
num <- num + 2
}
}
print(num)
print(denom)
fileConn<-file("data/newhampshire/ceron/results.txt")
writeLines(c(paste("biden sentiment: ", num/denom)), fileConn)
close(fileConn)
library(pracma)
install.packages("pracma")
install.packages("pracma")
# install.packages("devtools")
library(devtools)
# install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
# install_github("blogsvoices/iSAX")
library(iSAX)
library(textstem)
library(pracma)
setwd("thesis")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = 'data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
num <- 0
denom <- 0
total <- 0
results <- iSA(train_data, test_data, train_labels, predict=T)
for (sentiment in results[6]) {
total <- total + 1
print(strcmp(sentiment, "weakneg"))
if (strcmp(sentiment, "weakneg")) {
denom <- denom + 1
} else if (strcmp(sentiment, "strongneg")) {
denom <- denom + 2
} else if (strcmp(sentiment, "weakpos")) {
num <- num + 1
} else if (strcmp(sentiment, "strongpos")) {
num <- num + 2
}
}
print(num)
print(denom)
fileConn<-file("data/newhampshire/ceron/results.txt")
writeLines(c(paste("biden sentiment: ", num/denom)), fileConn)
close(fileConn)
results <- iSA(train_data, test_data, train_labels, predict=T)
preds <- results[6]
View(preds)
preds <- results[6][["pred"]]
results <- iSA(train_data, test_data, train_labels, predict=T)
preds <- results[6][["pred"]]
for (sentiment in preds) {
total <- total + 1
print(strcmp(sentiment, "weakneg"))
if (strcmp(sentiment, "weakneg")) {
denom <- denom + 1
} else if (strcmp(sentiment, "strongneg")) {
denom <- denom + 2
} else if (strcmp(sentiment, "weakpos")) {
num <- num + 1
} else if (strcmp(sentiment, "strongpos")) {
num <- num + 2
}
}
print(num)
print(denom)
setwd("thesis")
# install.packages("devtools")
# library(devtools)
# install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
# install_github("blogsvoices/iSAX")
# library(iSAX)
# library(textstem)
# library(pracma)
# setwd("thesis")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = 'data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
num <- 0
denom <- 0
total <- 0
results <- iSA(train_data, test_data, train_labels, predict=T)
preds <- results[6][["pred"]]
for (sentiment in preds) {
total <- total + 1
print(strcmp(sentiment, "weakneg"))
if (strcmp(sentiment, "weakneg")) {
denom <- denom + 1
} else if (strcmp(sentiment, "strongneg")) {
denom <- denom + 2
} else if (strcmp(sentiment, "weakpo")) {
num <- num + 1
} else if (strcmp(sentiment, "strongpo")) {
num <- num + 2
}
}
print(num)
print(denom)
fileConn<-file("data/newhampshire/ceron/results.txt")
writeLines(c(paste("biden sentiment: ", num/denom)), fileConn)
close(fileConn)
# install.packages("devtools")
# library(devtools)
# install.packages(c("tm", "BMS", "quadprog", "rJava", "parallel", "data.table", "entropy"))
# install_github("blogsvoices/iSAX")
# library(iSAX)
# library(textstem)
# library(pracma)
# setwd("thesis")
# usage: iSA(train_data, test_data, train_labels, predict=TRUE)
x <- read.csv(file = 'data/newhampshire/ceron/bennet_training_data.csv', header=T)
y <- read.csv(file = 'data/newhampshire/ceron/biden_training_data.csv', header=T)
train_data<-c(stem_words(x$Word))
train_labels<-c(stem_words(x$Polarity))
test_data <- c(stem_words(y$Polarity))
num <- 0
denom <- 0
total <- 0
results <- iSA(train_data, test_data, train_labels, predict=T)
preds <- results[6][["pred"]]
for (sentiment in preds) {
total <- total + 1
print(strcmp(sentiment, "weakneg"))
if (strcmp(sentiment, "weakneg")) {
denom <- denom + 1
} else if (strcmp(sentiment, "strongneg")) {
denom <- denom + 2
} else if (strcmp(sentiment, "weakpo")) {
num <- num + 1
} else if (strcmp(sentiment, "strongpo")) {
num <- num + 2
}
}
fileConn<-file("data/newhampshire/ceron/results.txt")
writeLines(c(paste("biden sentiment: ", num/denom)), fileConn)
close(fileConn)
fileConn<-file("data/newhampshire/ceron/results-weighted.txt")
writeLines(c(paste("biden sentiment: ", num/denom*total)), fileConn)
close(fileConn)
